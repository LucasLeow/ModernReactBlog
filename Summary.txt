== 1 React Intro ==
    - JS library created by FB
    - used by Netflix & Insta
    - used to create JS-driven dynamic web apps
    - other similar frameworks: Angular | Vue
    - create Single Page Apps quickly (single HTML page sent from server)
        - React handles everything else
            - website data
            - user interactivity
            - routing between pages

    - New pages handled by React instead of being sent from Server
    - eg: if user click on button for "/contact"
        - React injects "/contact" form component
        - Loading much faster compared to conventional retrieval page from Server using HTTP request
            
    React basics
        - components | events | templates | props | forms
    React Router
        - routes | route params | redirects
    React Hooks (to handle state)
        - useState | useEffect | custom Hooks


== 2 Getting started with React ==

    1) Create project dir
    2) npx create-react-app lucas-blog
        - using npx, don't have to use create-react-app tool
        - will take some time to download all dependencies required by React (into node_modules)

            -- Info about React project --
                - node_modules
                    - where all dependencies that comes with React is located
                    - any additional packages will be installed here
                
                - "public" dir: where all public files are located
                    - index.html : the entry point HTML served to browser
                        - all react code injected to this single index.html, the rest handled by React
                    
                - "src" dir: 99% of code will be here
                    - contains React Components
                    - App.js: The default React component created
                    - App.css: css file to style components
                    - App.test: for testing
                    - index.js: To kickstart application
                        - take all React components & mount to DOM
                    - reportWebVitals.js: Performance monitoring, not vital. Can delete if not needed
                        - if deleted, must go to index.js and delete corresponding usage

                - package.json
                    - contains all dependencies
                    - contains scripts to run shortcut for commands
            
    3) Preview react project (go to project dir)
        - npm start
        - npm run build
            * only standard cmds can run npm <cmd>, else must include "run" keyword

== 3 React Components & Templates ==

    - React Components (Building blocks for any React app)
        - A JS function that returns JSX expression (Function name starts with Capital letter)
            - JSX is nothing but HTML tags within return function

        - Each component a section of content on webpage
            - Nav component
            - Article component
            - Sidebar component
            etc.

        Components contain:
            - template (JSX HTML expression)
            - logic (JS functions using template literals)
            - JSX must always be wrapped with parent tag
                - only can have single parent tag

        - App.js is root Component
        - babel converts JSX to HTML & renders to DOM
        - Older versions of React need to import React from "react" for each component
            - version 17 & above, not needed

                1) remove all content in App.js <div> tags, keeping only <div> tags
                2) Must always export default <Component> & import <Component> from <path> in index.js

            
== 4 Dynamic Values in Component templates ==
    - Go to App.js (App component)
    - just use {var_name}
        - Dont have to include $ like normal JS

                function App() {
                    const title = "Home";
                    const likes = 50;
                    const link = https://www.google.com;
                    return (
                            <div className="App">
                            <div className="content">
                                <h1>{ title }</h1>
                                <p> Liked {likes} times </p>
                                <a href={link}> Google Site </a>
                            </div>
                            </div>
                    );
                }

        - React will convert all dynamic data to String in HTML
        - Cannot output:
            - boolean
            - JS objects

    Typical use case:
        - Array of blog titles from database + links to blogs
        - Need to dynamically output HTML template with {titles} & <a href={links}>

== 5 Multiple React Components ==  
    - React Component makes up the Component Tree
    - Typically don't want any logic / template written in Root Component
        - except for importing other root components

    - App.js : Root Component (top of tree)
        - Navbar.js
            - Button.js
        - BlogDetails.js
            -  Body.js
        - Sidebar.js
            - Categories.js
            - Tags.js

            1) Create Navbar Component
                - create Navbar.js in "src" dir
                - type "sfc" then tab (using Simple React Snippets to create boilerplate)
                    - stateless function component

                    const Navbar = () => {
                        return (
                            <nav className="navbar">
                                <h1>Lucas Blog</h1>
                                <div className="links">
                                    <a href="/">Home</a>
                                    <a href="/create">New Blog</a>
                                </div>
                            </nav>
                        );
                    }
                    export default Navbar;
                
                2) Go to App.js & import Navbar component
                    import Navbar from "./Navbar";

                      return (
                        <div className="App">
                        <Navbar />
                        <div className="content">
                        </div>
                        </div>
                    );
                
                3) Create Home.js component in "src" dir
                    - sfc then tab
                
                4) import Home component in App.js (root) & nest inside div

                    function App() {
                        return (
                            <div className="App">
                            <Navbar />
                            <Home />
                            </div>
                        );
                        }

== 6 Adding CSS Styles to Components ==
    - CSS file applies to:
        - React Component that imports it
        - Any other components on the same webpage
            - because React imports CSS style & adds as <style>
                - any other stylesheet imported will be appended as more <style> tags below
            - doesn't scope a stylesheet to a single component
        
    - To scope style to different components: (larger projects)
        - use CSS modules
        - styled components

    - For smaller projects:
        - single stylesheet will work (index.css)
            - works like global stylesheet, applying to all components on same webpage
            - imported into index.js (entry point where React renders all components)
        - style components by using relevant classes / id / cascade

            1) remove App.css & import statement in App.js
            2) remove all content within index.css
            3) Add css content into index.css (see file for details)
            4) add in-line styles in "Navbar" component (Navbar.js) as JSX
                - first {} represents dynamic data
                - second {} represents JS object (key : CSS property, value is the desired value)
                - in JSX, CSS properties are camelCased, values are always in String
                        <a href="/create" style={{
                            color: "white",
                            backgroundColor: "f1356d",
                            borderRadius: "8px"
                        }}
                * Just for example on in-line styles, don't have to add in project
    
== 7 Click Event ==
    - Many browser events may occur
        - (see JSBrowser.txt in Backend/Javascript)
        - Mouse | Keyboard | Form events etc.

    - In react, known as React Events
    (https://legacy.reactjs.org/docs/handling-events.html)
        - slightly different compared to HTML events

    - this section focuses on "click" event for simplicity

                * If want to pass argument to "handle" function:
                    - need to use anonymous function (see handleClickAgain)

                        const Home = () => {
                            const handleClick = ( ev ) => {
                                console.log("test", ev);
                            }
                            const handleClickAgain = (name) => {
                                console.log("Hello ", name);
                            }
                            return (
                                <div className="home">
                                    <h2>Homepage</h2>
                                    <button onClick={handleClick}>Click me</button>
                                    <button onClick={(ev)=>{
                                        console.log(ev); // or can pass to handleClickAgain fn to be accessed
                                        handleClickAgain("mario")
                                        }}>Click me again</button>
                                </div>
                            );
                        }

        ** Event object
            - passed as first argument
            - automatically passed to handler functions (handleClick & handleClickAgain in this eg.)
            - if using anonymous function, the anonymous function gets the event object


== 8 useState hook ==

    - Component state = Additional data being used by Component at that instant
    - can be:
        - array of values
        - boolean
        - Strings
        - Objects etc.

    - For data that will change over time / in response to some event
        - eg: Initial title: Hello
            - After clicking button, want title to change to Goodbye
            - [ title, setTitle ] = useState("Hello");


    -- Hooks in React --    
        - to make data "reactive" (value react according to changes / event)
        - several built-in hooks in React
        - Possible to create own custom hook
        - Hook = certain type of function that perform certain task
        - prefix with "use"
            - useState
            - useEffect
            - useCustomHook etc.
        
        1) go to Home.js (Home component)
            - remove the click me again button & its handler function
        
        2) Modify code in Home.js

            import { useState } from "react";
            const Home = () => {
                const [ name, setName ] = useState("initialName");
                    // name is the variable to store the value
                    // setName is a function to change "name" variable
                        // convention is var, setVar (prefixed with set)
                const [ age, setAge ] = useState(25);

                     const handleClick = () => {
                            console.log("button clicked");
                            setName("NewValue");
                            setAge("26");
                     }
                return (
                            <div className="home">
                                <h2>Homepage</h2>
                                <p>{name}</p>
                                <button onClick={handleClick}>Click me</button>
                            </div>
                    );
            }
                
            * setFoo function triggers React to re-render DOM to update new value of var
            * useState(<initialValue>)
                - can be of any type: String / Boolean / Number / Array / Object etc.

== 9 React Dev Tools == 
 - Browser extension in chrome / firefox
 - Integrated with browser dev tools to give extra features
    - only for webpages designed with React

- 2 additional tabs
    - Components (more commonly used)
        - Provides the Component Tree used in webpages
        - To see what Components are being used in the webpage
        - can be used to see:
            - DOM equivalent when rendered
            - log component details to console
            - See source code of component (how it was written in JS)
            - State value if useState hook used

    - Profiler

== 10 Outputting Lists data ==
    - Rendering JSX of list data
    - using useState hook since data might change
    - using "map" method in JS
        - cycles through array (item, idx, array)
    - when adding new tags through iteration of list items, need to give unique key
        - so that React can keep track of each item (id must be unique)
        - eg: <div className="blog-preview" key={item.id}>

        1) Go to Home.js component
            - remove all previous states & functions

            ** Make sure arrow function has () for returning the entire JSX
            eg: blogs.map(item=> ()) // () instead of {}

                    import { useState } from "react";
                    const Home = () => {
                        const [ blogs, setblogs ] = useState([
                            {title: "Blog 1", body: "Duis commodo tempor officia.", author: "mario", id: 1},
                            {title: "Blog 2", body: "Duis  tempor officia.", author: "yoshi", id: 2},
                            {title: "Blog 3", body: " commodo tempor officia.", author: "luigi", id: 3}
                        ]);

                        return (
                            <div className="home">
                                {blogs.map((item) => (
                                    <div className="blog-preview" key={item.id}>
                                        <h2>{ item.title }</h2>
                                        <p>Written by { item.author }</p>
                                    </div>
                                ))}
                            </div>
                        );
                    }
        2) Go to index.css
            - add styles for .blog-preview & .blog-preview:hover
    
== 11 React Props ==
    - allow data to be passed from parent component to child component

        - Can pass in data into reusable components to make display dynamic data
            - Using React props

            1) create BlogList.js

                        const BlogList = (props) => {
                        const blogs = props.blogs;
                        return ( 
                            
                            <div className="blog-list">
                            <h1>{props.title}</h1>
                                {blogs.map((item) => (
                                    <div className="blog-preview" key={item.id}>
                                        <h2>{ item.title }</h2>
                                        <p>Written by { item.author }</p>
                                    </div>
                                ))}
                            </div>
                        );
                    }
                    
                    export default BlogList;

                2) go back to Home.js:
                    - import BlogList from "./BlogList"
                    - use BlogList component in place of previous map method

                                return (
                                    <div className="home">
                                        <BlogList blogs={blogs} title={"titleProps"}/>
                                    </div>
                                );
                    
                3) pass props to BlogList

                    <BlogList blogs={blogs}/>
                    // key : blogs, value : "blogs" state variable storing array

                - Go back to BlogList component to use props
                    - refer to step 1 for props syntax 


            ** Destructuring props 
                - easier way to manipulate props data

                    const BlogList = ({blogs, title}) => { // instead of using "props" object
                        return ( 
                            
                            <div className="blog-list">
                                <h2>{title}</h2>
                                {blogs.map((item) => (
                                    <div className="blog-preview" key={item.id}>
                                        <h2>{ item.title }</h2>
                                        <p>Written by { item.author }</p>
                                    </div>
                                ))}
                            </div>
                        );
                    }
                    
                    export default BlogList;

== 12 Reusing React Components ==

        - blogs content may be on several different pages aside from homepage
        - i.e several pages requiring same logic
        - repeating code in several components / pages will not be efficient
        - can make a reusable component (BlogList component)
            - other components can use
            - different data can be passed using props

            1) go to Home.js & add new BlogList component
                - using filter() to get new array (of JS object) based on given condition
                - can be used for search page

                return (
                    <div className="home">
                        <BlogList blogs={blogs} title={"All Blogs"}/>
                        <BlogList blogs={blogs.filter(item => item.author=="mario")} title={"Mario's Blogs"} />
                    </div>
                );

== 13 JS function as props ==
    - used to perform action when interacting with components
        - eg: deleting blog posts upon click of button

    - passing setState fn from parent to child
        - because data exist in parent component
        - but delete functionality in child component
        - need to pass setState fn from parent to child

            1) Create button in BlogList component
             <button onClick={()=>{handleDelete(item.id)}}>Delete</button>

            2) handleDelete fn declared in parent components
                - setState & state itself can be manipulated within handleDelete fn in parent component
                - handleDelete fn can be passed as prop to child component

            3) go to Home.js (does not change original data, not interacting with database)

                const handleDelete = (id) => {
                    const newBlogs = blogs.filter(item => item.id !== id);
                    setBlogs(newBlogs);
                }

                down below, return:

                    <BlogList blogs={blogs} title={"All Blogs"} handleDelete={handleDelete}/>

                4) const BlogList = ({ blogs, title, handleDelete }) => {...<button onClick={()=>{handleDelete(item.id)}}>Delete</button>}


== 14 useEffect hook ==
    - runs a function whenever there is a render of the component
        - initial render to DOM
        - any state changes (resulting in re-render)
        ** Becareful of changing state within useEffect (may cause endless loop)

    - not stored in any constant, does not return anything. just executes functions

            1) Go to Home.js
                import { useState, useEffect } from "react";

                    useEffect(() => {
                        console.log("useEffect ran");
                    })

                    - executes on initial render + any state changes causing re-render

    - Typically used for: (side effects in React)
        - fetch data
        - communicate with auth services

    - can also access state within component

== 15 useEffect dependency array ==
    - sometimes, dont want to run a function after every render
    - Solution: useEffect dependency array (to check for certain state)
        - passed as 2nd argument to useEffect 

                useEffect(() => {
                    console.log("useEffect ran");
                }, [])

            Type of dependency array:
                []: only run useEffect on initial render
                [name] : only run on initial render + any state changes in <name> state
                [name, title] : run on initial render + any state change in <name> or <title>

== 16 Intro to JSON Server + setup ==
    - useEffect good for fetching data since it executes on first render
        - fetch data from database using HTTP request (express)

    - JSON server (provides JSON file) (use for route testing instead of actually creating backend)

        1) Create new "data" dir
            - create "db.json" inside

            - In JSON Server, top level property is considered a resource
                - endpoint automatically created to interact with said resource
                - mimicks a backend server & database

            eg: (blogs in this case is the top level property)
            {
                "blogs": [
                    {
                        "title": "First Blog",
                        "body": "Fugiat incididunt est tempor esse elit duis eu.",
                        "author": "mario",
                        "id":1
                    },
                    {
                        "title": "Second Blog",
                        "body": "Ut amet anim duis ut esse nostrud.",
                        "author": "luigi",
                        "id":2
                    }
                ]
            }

        2) Open new terminal 
            - cd to proj dir
            - npx json-server --watch data/db.json --port 8000
                - default is port 3000, which is currently taken by React

            2.1) Some endpoints being used in this project (using JSON Server)
                - /blogs - GET - fetch all blogs
                - /blog/:id - GET - fetch single blog
                - /blogs - POST - add new blog
                - /blogs/:id - DELETE - deletes a blogs

== 17 Fetching data with useEffect hook ==
    - typically used with [] dependency array (run only on initial render)

        1) go to Home.js, remove initial useState for blogs
            const [ blogs, setBlogs ] = useState(null);

                useEffect(() => {
                    fetch("http://localhost:8000/blogs")
                    .then(res=>res.json()) // converts json to js object
                    .then((data)=>{
                        console.log(data);
                        setBlogs(data);
                    })s
                }, [])

        2) initially, blogs are null state. results in rendering error
            - perform conditional templating
                - initially blogs is null, resulting in "false" logic
                - once blogs is not null, then result in "true" logic
                - right side logic will execute only if left side logic is true

            {blogs && <BlogList blogs={blogs} title={"All Blogs"} handleDelete={handleDelete}/>}
            {blogs && <BlogList blogs={blogs.filter(item => item.author === "mario")} title={"Mario's Blogs"}/>}

        3) remove handleDelete in Home.js
            - remove delete button in BlogList.js
            (deleting data locally, will implement delete request later)

== 18 Conditional Loading Messages ==
    - create a loading message while data is being fetched
    - allow user to know page is loading

        1) At Home.js

            const [pending, setPending] = useState(true);

            - inside fetch request, once data fetched, setPending(false)

                    .then((data)=>{
                        console.log(data);
                        setBlogs(data);
                        setPending(false);
                    })

            - inside jsx, include conditional templating for loading message

                        { pending && <div> Loading ... </div>}
                        {blogs && <BlogList blogs={blogs} title={"All Blogs"}/>}

== 19 Handling Fetch errors ==
    - sometimes, cannot connect to server
        - use .catch(err) from fetch fn
    - sometimes, able to connect but server returns an error
        - need to use res object to check for status

            1) go to Home.js

            const [ error, setError ] = useState(null);

            inside fetch chain:
                - .then( res => {
                    console.log(res); // to see response properties
                    if (!res.ok) {
                        throw Error("could not fetch requested resource");
                    }
                    return res.json();
                })
                .then((data) => {
                    setBlogs(data);
                    setPending(false);
                    setError(null); // if successfully get data, remove error message
                })
                .catch((err) => {
                    setError(err);
                    setPending(false);
                })

                2) Create conditional templating for error message

                            { pending && <h4> Loading ... </h4>}
                             { error && <h4> { error } </h4>}
                
== 20 Custom Hook ==
    - currently, utilize useState & useEffect to fetch data & display data dynamically in Home component
        - [blog, setBlog] + [pending, setPending] + [error, setError]
        - conditional templating to display data using JSX

    - if other components want to use, need to include all these code (repetitive)
        - Solution: custom hook
            - externalizing logic into own file for reusability

                * must prefix with "use" for custom hooks
                1) Create new file : useFetch.js

                            import { useState, useEffect } from "react";

                            const useFetch = (url) => {

                                    const [ data, setData ] = useState(null);
                                    const [loading, setLoading] = useState(true);
                                    const [error, setError] = useState(null);

                                    useEffect(() => {
                                        setTimeout(() => {
                                            fetch(url)
                                            .then(res=> {
                                                if(!res.ok) {
                                                    throw Error("Could not fetch requested data");
                                                }
                                                return res.json()
                                            })
                                            .then((data) => {
                                                setData(data);
                                                setLoading(false);
                                                setError(null);
                                            })
                                            .catch(err => {
                                                setError(err.message);
                                                setLoading(false);
                                            });
                                        }, 1000)
                                    }, [ url ]); // dependency array to check for changes in URL (diff. component invoking)
                                return {data, loading, error};
                            }
                        
                        export default useFetch;

                
                2) import { useState, useEffect } from "react";
                3) Bring over all states from Home.js to useFetch.js
                    - add within useFetch function
                
                4) export useFetch function
                    export default useFetch;

                5) rename [blogs, setBlogs] to [data, setData] to make it more generic
                6) return { data, pending, error }, the 3 essential data required by all other components
                    - to display required front-end
                    6.1) change dependency array to [url], useEffect will run whenever URL changes
                7) pass in url as argument to useFetch function, so that other component can pass in url

                8) import useFetch to Home.js
                    - remove useState & useEffect imports in Home.js


                            import useFetch from "./useFetch";
                            import BlogList from "./BlogList";

                            const Home = () => {

                                const { data: blogs , pending, error } = useFetch("http://localhost:8000/blogs") // destructure data, renamed as blogs
                                return (
                                    <div className="home">
                                        { pending && <h4> Loading ... </h4>}
                                        { error && <h4> { error } </h4>}
                                        {blogs && <BlogList blogs={blogs} title={"All Blogs"}/>}
                                        {blogs && <BlogList blogs={blogs.filter(item => item.author === "mario")} title={"Mario's Blogs"}/>}
                                    </div>
                                );
                            }
            export default Home;

== 21 React Router ==
    - to link different webpages together
    - React has own way of renderings different pages
        1) Make initial request to server
        2) server responds with index.html + js bundle (React files)
            - React & React Router control app
            - initial index.html virtually empty, React injects component  
        3) Any request for other "webpages" will be handled by React Router
            - thus, no contact with server
        4) React Router will inject the required component / content on screens

        - Top level component assigned for each route
            - component dynamically injected into browser
    
    * Makes less requests to server, thus making everything seem faster

    Setting up React Router:
        1) install react router (not part of core react library)
            - npm install react-router-dom

        2) go to App.js (root component)
            import { BrowserRouter as Router, Route, Routes } from "react-router-dom";

        3) Surround entire app with <Router>
            - all components nested within App (root component) have access to Router

                        function App() {
                        return (
                            <Router> // step 3
                                <div className="App">
                                <Navbar />
                                    <div className="content">
                                        <Routes> // step 4 (in v5 react-router-dom, was known as Switch)
                                            <Route path="/" element={<Home />}></Route>
                                        </Routes>
                                    </div>
                                </div>
                            </Router>
                        );
                        }
            4) Implement <Routes> </Routes>
                - any component within this tag can be assigned a route
                - ensure that only 1 <Route> component renders at any 1 time
                    - else, React may render multiple <Route>

                                <Routes> // step 4 (in v5 react-router-dom, was known as Switch)
                                    <Route path="/" element={<Home />}></Route>
                                </Routes>

== 22 Exact Match Routes ==
    - adding "create blog" route

        1) create "Create.js"
            - sfc then tab, -> "Create" component
            - create simple template for route testing

                    const Create = () => {
                        return (
                            <div className="create">
                                <h2>Add a new blog</h2>
                            </div>
                        );
                    }
                    
                    export default Create;

        2) Go back to App.js to implement route
            import Create from "./Create";

            <Route path="/create" element={<Create />}></Route>

== 23 Router Links ==
    - Have to use special <Link> tag to allow React Router to intercept request
    - if use <a> tags, request is still made to server
    - <Link> prevent request made to server
        - looks at path then matches against that declared in <Routes>

    1) Go to Navbar component
        -  import  { Link } from "react-router-dom";

        replace <a> tags with <Link> tags
            - href changed to "to"

                <Link to="/">Home</Link>
                <Link to="/create">New Blog</Link>

== 24 useEffect cleanup ==
    - sometimes, user change page quickly
    - initial component was still loading & states not yet updated
        - user click to another page, resulting in another component injected
        - initial component finished loading & wants to update state
        - state no longer there due to new component loaded
        (error results)

    Solution:
        - stop fetch() from continuing for initial component if new component requested
        - using cleanUp function + abort controller

            1) go to useFetch.js Hook
            2) place clean up function inside useEffect()


                const useFetch = (url) => {

                    const [ data, setData ] = useState(null);
                    const [pending, setPending] = useState(true);
                    const [error, setError] = useState(null);

                    useEffect(() => {

                        const abortController = new AbortController();
                                 
                        setTimeout(() => {
                            fetch(url, { signal: abortController.signal })
                            .then(res=>{
                                console.log(res); // to see what properties "res" obj has
                                if (!res.ok) {
                                    throw Error("Could not fetch correct data for requested resource.");
                                }
                                return res.json()
                            })
                            .then((data)=>{
                                setData(data);
                                setPending(false);
                                setError(null);
                            })
                            .catch((err)=>{
                                if (err.name === "AbortError") {
                                    console.log("fetch aborted");
                                } else {
                                    setError(err.message);
                                    setPending(false);
                                }
                            });
                        }, 1000)
                        return () =>  abortController.abort(); // abort fetch if change requested before load completes
                    }, [url]);

                        return { data, pending, error };
                    }

== 25 Route Parameters ==  
    - unique value within route (to retrieve / manipulate specific resource)
        eg: /blogs/:id
        - /blogs/123 (id is 123)

            1) Create BlogDetails.js (Blog Details component)
                - create simple template for route testing
                (sfc then tab)

                const BlogDetails = () => {
                        return ( 
                            <div className="blog-details">
                                <h2> Blog Details</h2>
                            </div>
                        );
                    }
                    s
                    export default BlogDetails;
                
            2) Create route to BlogDetails in App.js

                     <Route path="/blog/:id" element={<BlogDetails />}></Route>
            
            3) implement useParams hook to pass id from Route to BlogDetails component
                - go to BlogDetails.js
                - import { useParams } from "react-router-dom";
                -     const { id } = useParams();
                    - <id> must match whatever route params was provided
                        - since our route path is /blog/:id, then inside useParams must be { id }
            
            4) Go to BlogList.js to set up links to access different blogs based on ID of blog
                - create <Link> tag

                import { Link } from "react-router-dom";
                
                const BlogList = ({blogs, title, handleDelete}) => {
                    return ( 
                        <div className="blog-list">
                            <h2>{ title }</h2>
                            {blogs.map((item) => (
                                <div className="blog-preview" key={item.id}>
                                    <Link to={`/blogs/${item.id}`}>
                                        <h2>{ item.title }</h2>
                                        <p>Written by { item.author }</p>
                                    </Link>
                                </div>
                            ))}
                        </div>
                    );
                }