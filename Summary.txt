== 1 React Intro ==
    - JS library created by FB
    - used by Netflix & Insta
    - used to create JS-driven dynamic web apps
    - other similar frameworks: Angular | Vue
    - create Single Page Apps quickly (single HTML page sent from server)
        - React handles everything else
            - website data
            - user interactivity
            - routing between pages

    - New pages handled by React instead of being sent from Server
    - eg: if user click on button for "/contact"
        - React injects "/contact" form component
        - Loading much faster compared to conventional retrieval page from Server using HTTP request
            
    React basics
        - components | events | templates | props | forms
    React Router
        - routes | route params | redirects
    React Hooks (to handle state)
        - useState | useEffect | custom Hooks


== 2 Getting started with React ==

    1) Create project dir
    2) npx create-react-app lucas-blog
        - using npx, don't have to use create-react-app tool
        - will take some time to download all dependencies required by React (into node_modules)

            -- Info about React project --
                - node_modules
                    - where all dependencies that comes with React is located
                    - any additional packages will be installed here
                
                - "public" dir: where all public files are located
                    - index.html : the entry point HTML served to browser
                        - all react code injected to this single index.html, the rest handled by React
                    
                - "src" dir: 99% of code will be here
                    - contains React Components
                    - App.js: The default React component created
                    - App.css: css file to style components
                    - App.test: for testing
                    - index.js: To kickstart application
                        - take all React components & mount to DOM
                    - reportWebVitals.js: Performance monitoring, not vital. Can delete if not needed
                        - if deleted, must go to index.js and delete corresponding usage

                - package.json
                    - contains all dependencies
                    - contains scripts to run shortcut for commands
            
    3) Preview react project (go to project dir)
        - npm start
        - npm run build
            * only standard cmds can run npm <cmd>, else must include "run" keyword

== 3 React Components & Templates ==

    - React Components (Building blocks for any React app)
        - A JS function that returns JSX expression (Function name starts with Capital letter)
            - JSX is nothing but HTML tags within return function

        - Each component a section of content on webpage
            - Nav component
            - Article component
            - Sidebar component
            etc.

        Components contain:
            - template (JSX HTML expression)
            - logic (JS functions using template literals)

        - App.js is root Component
        - babel converts JSX to HTML & renders to DOM
        - Older versions of React need to import React from "react" for each component
            - version 17 & above, not needed

                1) remove all content in App.js <div> tags, keeping only <div> tags
                2) Must always export default <Component> & import <Component> from <path> in index.js

            
== 4 Dynamic Values in Component templates ==
    - Go to App.js (App component)
    - just use {var_name}
        - Dont have to include $ like normal JS

                function App() {
                    const title = "Home";
                    const likes = 50;
                    const link = https://www.google.com;
                    return (
                            <div className="App">
                            <div className="content">
                                <h1>{ title }</h1>
                                <p> Liked {likes} times </p>
                                <a href={link}> Google Site </a>
                            </div>
                            </div>
                    );
                }

        - React will convert all dynamic data to String in HTML
        - Cannot output:
            - boolean
            - JS objects

    Typical use case:
        - Array of blog titles from database + links to blogs
        - Need to dynamically output HTML template with {titles} & <a href={links}>

== 5 Multiple React Components ==  
    - React Component makes up the Component Tree
    - Typically don't want any logic / template written in Root Component
        - except for importing other root components

    - App.js : Root Component (top of tree)
        - Navbar.js
            - Button.js
        - BlogDetails.js
            -  Body.js
        - Sidebar.js
            - Categories.js
            - Tags.js

            1) Create Navbar Component
                - create Navbar.js in "src" dir
                - type "sfc" then tab (using Simple React Snippets to create boilerplate)
                    - stateless function component

                    const Navbar = () => {
                        return (
                            <nav className="navbar">
                                <h1>Lucas Blog</h1>
                                <div className="links">
                                    <a href="/">Home</a>
                                    <a href="/create">New Blog</a>
                                </div>
                            </nav>
                        );
                    }
                    export default Navbar;
                
                2) Go to App.js & import Navbar component
                    import Navbar from "./Navbar";

                      return (
                        <div className="App">
                        <Navbar />
                        <div className="content">
                        </div>
                        </div>
                    );
                
                3) Create Home.js component in "src" dir
                    - sfc then tab
                
                4) import Home component in App.js (root) & nest inside div

                    function App() {
                        return (
                            <div className="App">
                            <Navbar />
                            <Home />
                            </div>
                        );
                        }

== 6 Adding CSS Styles to Components ==
    - CSS file applies to:
        - React Component that imports it
        - Any other components on the same webpage
            - because React imports CSS style & adds as <style>
                - any other stylesheet imported will be appended as more <style> tags below
            - doesn't scope a stylesheet to a single component
        
    - To scope style to different components: (larger projects)
        - use CSS modules
        - styled components

    - For smaller projects:
        - single stylesheet will work (index.css)
            - works like global stylesheet, applying to all components on same webpage
            - imported into index.js (entry point where React renders all components)
        - style components by using relevant classes / id / cascade

            1) remove App.css & import statement in App.js
            2) remove all content within index.css
            3) Add css content into index.css (see file for details)
            4) add in-line styles in "Navbar" component (Navbar.js) as JSX
                - first {} represents dynamic data
                - second {} represents JS object (key : CSS property, value is the desired value)
                - in JSX, CSS properties are camelCased, values are always in String
                        <a href="/create" style={{
                            color: "white",
                            backgroundColor: "f1356d",
                            borderRadius: "8px"
                        }}
                * Just for example on in-line styles, don't have to add in project
    
== 7 Click Event ==
    - Many browser events may occur
        - (see JSBrowser.txt in Backend/Javascript)
        - Mouse | Keyboard | Form events etc.

    - In react, known as React Events
    (https://legacy.reactjs.org/docs/handling-events.html)
        - slightly different compared to HTML events

    - this section focuses on "click" event for simplicity

                * If want to pass argument to "handle" function:
                    - need to use anonymous function (see handleClickAgain)

                        const Home = () => {
                            const handleClick = ( ev ) => {
                                console.log("test", ev);
                            }
                            const handleClickAgain = (name) => {
                                console.log("Hello ", name);
                            }
                            return (
                                <div className="home">
                                    <h2>Homepage</h2>
                                    <button onClick={handleClick}>Click me</button>
                                    <button onClick={(ev)=>{
                                        console.log(ev); // or can pass to handleClickAgain fn to be accessed
                                        handleClickAgain("mario")
                                        }}>Click me again</button>
                                </div>
                            );
                        }

        ** Event object
            - passed as first argument
            - automatically passed to handler functions (handleClick & handleClickAgain in this eg.)
            - if using anonymous function, the anonymous function gets the event object

 